/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Transaction } from '../models';
// @ts-ignore
import type { UserSummary } from '../models';
/**
 * CustomersApi - axios parameter creator
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all transactions for a given customer, with role-based access: - **Vendor**: Can view all transactions for the customer across all their stores. Can optionally filter by a specific `vendorId` (store ID). - **Store Admin**: Can only view transactions for the customer within their assigned store. The `vendorId` filter is ignored. 
         * @summary List all transactions for a specific customer
         * @param {string} customerId The ID of the customer.
         * @param {string} [vendorId] Optional. For Vendors, filters transactions by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomerIdTransactionsGet: async (customerId: string, vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customersCustomerIdTransactionsGet', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}/transactions`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of unique customers who have patronized a store. - **Vendor**: Can see customers from all their stores. Can filter by a specific `vendorId`. - **Store Admin/Shopper**: Can only see customers from their assigned store. The `vendorId` filter is ignored. 
         * @summary List customers for a vendor, admin, or shopper
         * @param {string} [vendorId] Optional. For vendors, filters customers by a specific store ID. For staff, this parameter is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersGet: async (vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all transactions for a given customer, with role-based access: - **Vendor**: Can view all transactions for the customer across all their stores. Can optionally filter by a specific `vendorId` (store ID). - **Store Admin**: Can only view transactions for the customer within their assigned store. The `vendorId` filter is ignored. 
         * @summary List all transactions for a specific customer
         * @param {string} customerId The ID of the customer.
         * @param {string} [vendorId] Optional. For Vendors, filters transactions by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersCustomerIdTransactionsGet(customerId: string, vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersCustomerIdTransactionsGet(customerId, vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.customersCustomerIdTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of unique customers who have patronized a store. - **Vendor**: Can see customers from all their stores. Can filter by a specific `vendorId`. - **Store Admin/Shopper**: Can only see customers from their assigned store. The `vendorId` filter is ignored. 
         * @summary List customers for a vendor, admin, or shopper
         * @param {string} [vendorId] Optional. For vendors, filters customers by a specific store ID. For staff, this parameter is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersGet(vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.customersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomersApi - factory interface
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * Retrieves a list of all transactions for a given customer, with role-based access: - **Vendor**: Can view all transactions for the customer across all their stores. Can optionally filter by a specific `vendorId` (store ID). - **Store Admin**: Can only view transactions for the customer within their assigned store. The `vendorId` filter is ignored. 
         * @summary List all transactions for a specific customer
         * @param {string} customerId The ID of the customer.
         * @param {string} [vendorId] Optional. For Vendors, filters transactions by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersCustomerIdTransactionsGet(customerId: string, vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Transaction>> {
            return localVarFp.customersCustomerIdTransactionsGet(customerId, vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of unique customers who have patronized a store. - **Vendor**: Can see customers from all their stores. Can filter by a specific `vendorId`. - **Store Admin/Shopper**: Can only see customers from their assigned store. The `vendorId` filter is ignored. 
         * @summary List customers for a vendor, admin, or shopper
         * @param {string} [vendorId] Optional. For vendors, filters customers by a specific store ID. For staff, this parameter is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersGet(vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSummary>> {
            return localVarFp.customersGet(vendorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 */
export class CustomersApi extends BaseAPI {
    /**
     * Retrieves a list of all transactions for a given customer, with role-based access: - **Vendor**: Can view all transactions for the customer across all their stores. Can optionally filter by a specific `vendorId` (store ID). - **Store Admin**: Can only view transactions for the customer within their assigned store. The `vendorId` filter is ignored. 
     * @summary List all transactions for a specific customer
     * @param {string} customerId The ID of the customer.
     * @param {string} [vendorId] Optional. For Vendors, filters transactions by a specific store ID. Ignored for other roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customersCustomerIdTransactionsGet(customerId: string, vendorId?: string, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersCustomerIdTransactionsGet(customerId, vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of unique customers who have patronized a store. - **Vendor**: Can see customers from all their stores. Can filter by a specific `vendorId`. - **Store Admin/Shopper**: Can only see customers from their assigned store. The `vendorId` filter is ignored. 
     * @summary List customers for a vendor, admin, or shopper
     * @param {string} [vendorId] Optional. For vendors, filters customers by a specific store ID. For staff, this parameter is ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customersGet(vendorId?: string, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customersGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}

