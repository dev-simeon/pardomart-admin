/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { StaffPostRequest } from '../models';
// @ts-ignore
import type { StaffStaffIdPatchRequest } from '../models';
/**
 * StaffApi - axios parameter creator
 */
export const StaffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of staff members with role-based access control: - **Vendor**: Can see all staff members across all of their stores. Can filter by a specific `vendorId` they own. - **Store Admin**: Can only see staff members from their assigned store. The `vendorId` filter is ignored. - **Store Shopper**: Not authorized to use this endpoint. 
         * @summary List staff members based on user role
         * @param {string} [vendorId] Optional. For Vendors, filters staff by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffGet: async (vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new staff member (shopper) for a vendor
         * @param {StaffPostRequest} staffPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffPost: async (staffPostRequest: StaffPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffPostRequest' is not null or undefined
            assertParamExists('staffPost', 'staffPostRequest', staffPostRequest)
            const localVarPath = `/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a staff member\'s account
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdDelete: async (staffId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('staffStaffIdDelete', 'staffId', staffId)
            const localVarPath = `/staff/{staffId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single staff member by ID
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdGet: async (staffId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('staffStaffIdGet', 'staffId', staffId)
            const localVarPath = `/staff/{staffId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a staff member\'s details
         * @param {StaffStaffIdPatchRequest} staffStaffIdPatchRequest 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdPatch: async (staffStaffIdPatchRequest: StaffStaffIdPatchRequest, staffId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffStaffIdPatchRequest' is not null or undefined
            assertParamExists('staffStaffIdPatch', 'staffStaffIdPatchRequest', staffStaffIdPatchRequest)
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('staffStaffIdPatch', 'staffId', staffId)
            const localVarPath = `/staff/{staffId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffStaffIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all staff members for a specific store
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStoreVendorIdGet: async (vendorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('staffStoreVendorIdGet', 'vendorId', vendorId)
            const localVarPath = `/staff/store/{vendorId}`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of transactions performed by staff members, with role-based access: - **Vendor**: Can see transactions from all staff across all their stores. Can filter by `staffUserId` and/or `vendorId`. - **Store Admin**: Can only see transactions from staff in their assigned store. The `vendorId` filter is ignored if provided. 
         * @summary List all transactions for a vendor\'s staff
         * @param {string} [staffUserId] Optional. Filter transactions for a specific staff member (shopper or admin).
         * @param {string} [vendorId] Optional. For Vendors, filters transactions for staff at a specific store. For Store Admins, this is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffTransactionsGet: async (staffUserId?: string, vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (staffUserId !== undefined) {
                localVarQueryParameter['staffUserId'] = staffUserId;
            }

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffApi - functional programming interface
 */
export const StaffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of staff members with role-based access control: - **Vendor**: Can see all staff members across all of their stores. Can filter by a specific `vendorId` they own. - **Store Admin**: Can only see staff members from their assigned store. The `vendorId` filter is ignored. - **Store Shopper**: Not authorized to use this endpoint. 
         * @summary List staff members based on user role
         * @param {string} [vendorId] Optional. For Vendors, filters staff by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffGet(vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new staff member (shopper) for a vendor
         * @param {StaffPostRequest} staffPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffPost(staffPostRequest: StaffPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffPost(staffPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a staff member\'s account
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffStaffIdDelete(staffId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffStaffIdDelete(staffId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffStaffIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a single staff member by ID
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffStaffIdGet(staffId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffStaffIdGet(staffId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffStaffIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a staff member\'s details
         * @param {StaffStaffIdPatchRequest} staffStaffIdPatchRequest 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffStaffIdPatch(staffStaffIdPatchRequest: StaffStaffIdPatchRequest, staffId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffStaffIdPatch(staffStaffIdPatchRequest, staffId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffStaffIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all staff members for a specific store
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffStoreVendorIdGet(vendorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffStoreVendorIdGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffStoreVendorIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of transactions performed by staff members, with role-based access: - **Vendor**: Can see transactions from all staff across all their stores. Can filter by `staffUserId` and/or `vendorId`. - **Store Admin**: Can only see transactions from staff in their assigned store. The `vendorId` filter is ignored if provided. 
         * @summary List all transactions for a vendor\'s staff
         * @param {string} [staffUserId] Optional. Filter transactions for a specific staff member (shopper or admin).
         * @param {string} [vendorId] Optional. For Vendors, filters transactions for staff at a specific store. For Store Admins, this is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffTransactionsGet(staffUserId?: string, vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffTransactionsGet(staffUserId, vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApi.staffTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StaffApi - factory interface
 */
export const StaffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffApiFp(configuration)
    return {
        /**
         * Retrieves a list of staff members with role-based access control: - **Vendor**: Can see all staff members across all of their stores. Can filter by a specific `vendorId` they own. - **Store Admin**: Can only see staff members from their assigned store. The `vendorId` filter is ignored. - **Store Shopper**: Not authorized to use this endpoint. 
         * @summary List staff members based on user role
         * @param {string} [vendorId] Optional. For Vendors, filters staff by a specific store ID. Ignored for other roles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffGet(vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffGet(vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new staff member (shopper) for a vendor
         * @param {StaffPostRequest} staffPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffPost(staffPostRequest: StaffPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffPost(staffPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a staff member\'s account
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdDelete(staffId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffStaffIdDelete(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single staff member by ID
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdGet(staffId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffStaffIdGet(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a staff member\'s details
         * @param {StaffStaffIdPatchRequest} staffStaffIdPatchRequest 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStaffIdPatch(staffStaffIdPatchRequest: StaffStaffIdPatchRequest, staffId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffStaffIdPatch(staffStaffIdPatchRequest, staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all staff members for a specific store
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffStoreVendorIdGet(vendorId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffStoreVendorIdGet(vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of transactions performed by staff members, with role-based access: - **Vendor**: Can see transactions from all staff across all their stores. Can filter by `staffUserId` and/or `vendorId`. - **Store Admin**: Can only see transactions from staff in their assigned store. The `vendorId` filter is ignored if provided. 
         * @summary List all transactions for a vendor\'s staff
         * @param {string} [staffUserId] Optional. Filter transactions for a specific staff member (shopper or admin).
         * @param {string} [vendorId] Optional. For Vendors, filters transactions for staff at a specific store. For Store Admins, this is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffTransactionsGet(staffUserId?: string, vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.staffTransactionsGet(staffUserId, vendorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffApi - object-oriented interface
 */
export class StaffApi extends BaseAPI {
    /**
     * Retrieves a list of staff members with role-based access control: - **Vendor**: Can see all staff members across all of their stores. Can filter by a specific `vendorId` they own. - **Store Admin**: Can only see staff members from their assigned store. The `vendorId` filter is ignored. - **Store Shopper**: Not authorized to use this endpoint. 
     * @summary List staff members based on user role
     * @param {string} [vendorId] Optional. For Vendors, filters staff by a specific store ID. Ignored for other roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffGet(vendorId?: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new staff member (shopper) for a vendor
     * @param {StaffPostRequest} staffPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffPost(staffPostRequest: StaffPostRequest, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffPost(staffPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a staff member\'s account
     * @param {string} staffId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffStaffIdDelete(staffId: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffStaffIdDelete(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single staff member by ID
     * @param {string} staffId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffStaffIdGet(staffId: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffStaffIdGet(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a staff member\'s details
     * @param {StaffStaffIdPatchRequest} staffStaffIdPatchRequest 
     * @param {string} staffId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffStaffIdPatch(staffStaffIdPatchRequest: StaffStaffIdPatchRequest, staffId: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffStaffIdPatch(staffStaffIdPatchRequest, staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all staff members for a specific store
     * @param {string} vendorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffStoreVendorIdGet(vendorId: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffStoreVendorIdGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of transactions performed by staff members, with role-based access: - **Vendor**: Can see transactions from all staff across all their stores. Can filter by `staffUserId` and/or `vendorId`. - **Store Admin**: Can only see transactions from staff in their assigned store. The `vendorId` filter is ignored if provided. 
     * @summary List all transactions for a vendor\'s staff
     * @param {string} [staffUserId] Optional. Filter transactions for a specific staff member (shopper or admin).
     * @param {string} [vendorId] Optional. For Vendors, filters transactions for staff at a specific store. For Store Admins, this is ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public staffTransactionsGet(staffUserId?: string, vendorId?: string, options?: RawAxiosRequestConfig) {
        return StaffApiFp(this.configuration).staffTransactionsGet(staffUserId, vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}

