/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EarningsTotalGet200Response } from '../models';
// @ts-ignore
import type { Transaction } from '../models';
/**
 * EarningsApi - axios parameter creator
 */
export const EarningsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all earnings (vendor payouts) for the authenticated vendor owner. Can be filtered by a specific `vendorId` (store ID) to see earnings for just one store. 
         * @summary List earnings for a vendor
         * @param {string} [vendorId] Optional. Filter earnings for a specific store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsGet: async (vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates and returns the total earnings for the authenticated vendor owner. The total can be filtered by a specific time period. 
         * @summary Get total earnings for a vendor
         * @param {EarningsTotalGetPeriodEnum} [period] Optional. The time period to calculate earnings for. - &#x60;today&#x60;: From the beginning of the current day. - &#x60;7days&#x60;: For the last 7 days. - &#x60;1month&#x60;: For the last 1 month. - &#x60;1year&#x60;: For the last 1 year. If omitted, total earnings of all time are returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsTotalGet: async (period?: EarningsTotalGetPeriodEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/earnings/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EarningsApi - functional programming interface
 */
export const EarningsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EarningsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all earnings (vendor payouts) for the authenticated vendor owner. Can be filtered by a specific `vendorId` (store ID) to see earnings for just one store. 
         * @summary List earnings for a vendor
         * @param {string} [vendorId] Optional. Filter earnings for a specific store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async earningsGet(vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.earningsGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EarningsApi.earningsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Calculates and returns the total earnings for the authenticated vendor owner. The total can be filtered by a specific time period. 
         * @summary Get total earnings for a vendor
         * @param {EarningsTotalGetPeriodEnum} [period] Optional. The time period to calculate earnings for. - &#x60;today&#x60;: From the beginning of the current day. - &#x60;7days&#x60;: For the last 7 days. - &#x60;1month&#x60;: For the last 1 month. - &#x60;1year&#x60;: For the last 1 year. If omitted, total earnings of all time are returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async earningsTotalGet(period?: EarningsTotalGetPeriodEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsTotalGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.earningsTotalGet(period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EarningsApi.earningsTotalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EarningsApi - factory interface
 */
export const EarningsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EarningsApiFp(configuration)
    return {
        /**
         * Retrieves a list of all earnings (vendor payouts) for the authenticated vendor owner. Can be filtered by a specific `vendorId` (store ID) to see earnings for just one store. 
         * @summary List earnings for a vendor
         * @param {string} [vendorId] Optional. Filter earnings for a specific store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsGet(vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Transaction>> {
            return localVarFp.earningsGet(vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates and returns the total earnings for the authenticated vendor owner. The total can be filtered by a specific time period. 
         * @summary Get total earnings for a vendor
         * @param {EarningsTotalGetPeriodEnum} [period] Optional. The time period to calculate earnings for. - &#x60;today&#x60;: From the beginning of the current day. - &#x60;7days&#x60;: For the last 7 days. - &#x60;1month&#x60;: For the last 1 month. - &#x60;1year&#x60;: For the last 1 year. If omitted, total earnings of all time are returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsTotalGet(period?: EarningsTotalGetPeriodEnum, options?: RawAxiosRequestConfig): AxiosPromise<EarningsTotalGet200Response> {
            return localVarFp.earningsTotalGet(period, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EarningsApi - object-oriented interface
 */
export class EarningsApi extends BaseAPI {
    /**
     * Retrieves a list of all earnings (vendor payouts) for the authenticated vendor owner. Can be filtered by a specific `vendorId` (store ID) to see earnings for just one store. 
     * @summary List earnings for a vendor
     * @param {string} [vendorId] Optional. Filter earnings for a specific store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public earningsGet(vendorId?: string, options?: RawAxiosRequestConfig) {
        return EarningsApiFp(this.configuration).earningsGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calculates and returns the total earnings for the authenticated vendor owner. The total can be filtered by a specific time period. 
     * @summary Get total earnings for a vendor
     * @param {EarningsTotalGetPeriodEnum} [period] Optional. The time period to calculate earnings for. - &#x60;today&#x60;: From the beginning of the current day. - &#x60;7days&#x60;: For the last 7 days. - &#x60;1month&#x60;: For the last 1 month. - &#x60;1year&#x60;: For the last 1 year. If omitted, total earnings of all time are returned. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public earningsTotalGet(period?: EarningsTotalGetPeriodEnum, options?: RawAxiosRequestConfig) {
        return EarningsApiFp(this.configuration).earningsTotalGet(period, options).then((request) => request(this.axios, this.basePath));
    }
}

export const EarningsTotalGetPeriodEnum = {
    Today: 'today',
    _7days: '7days',
    _1month: '1month',
    _1year: '1year'
} as const;
export type EarningsTotalGetPeriodEnum = typeof EarningsTotalGetPeriodEnum[keyof typeof EarningsTotalGetPeriodEnum];
