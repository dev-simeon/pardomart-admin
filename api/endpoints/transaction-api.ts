/* tslint:disable */
/* eslint-disable */
/**
 * PardoMart Node API
 * API documentation for the PardoMart Node.js application.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pardomart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SavedPaymentMethod } from '../models';
// @ts-ignore
import type { TransactionWithRelations } from '../models';
// @ts-ignore
import type { TransactionsCreatePaymentIntentPost200Response } from '../models';
// @ts-ignore
import type { TransactionsCreatePaymentIntentPostRequest } from '../models';
/**
 * TransactionApi - axios parameter creator
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {TransactionsCreatePaymentIntentPostRequest} transactionsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreatePaymentIntentPost: async (transactionsCreatePaymentIntentPostRequest: TransactionsCreatePaymentIntentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsCreatePaymentIntentPostRequest' is not null or undefined
            assertParamExists('transactionsCreatePaymentIntentPost', 'transactionsCreatePaymentIntentPostRequest', transactionsCreatePaymentIntentPostRequest)
            const localVarPath = `/transactions/create-payment-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsCreatePaymentIntentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my transaction history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMePaymentMethodsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/me/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMePaymentMethodsPaymentMethodIdDelete: async (paymentMethodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('transactionsMePaymentMethodsPaymentMethodIdDelete', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/transactions/me/payment-methods/{paymentMethodId}`
                .replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSetupIntentPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/setup-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all payment-related transactions for stores owned by the authenticated vendor user. Can be filtered by a specific store.
         * @summary Get payment transactions for a vendor user
         * @param {string} [vendorId] Optional. The ID of a specific store (vendor) to filter payments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsVendorGet: async (vendorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vendorId !== undefined) {
                localVarQueryParameter['vendorId'] = vendorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {TransactionsCreatePaymentIntentPostRequest} transactionsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest: TransactionsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsCreatePaymentIntentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsCreatePaymentIntentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my transaction history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsMePaymentMethodsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SavedPaymentMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsMePaymentMethodsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsMePaymentMethodsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsMePaymentMethodsPaymentMethodIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsSetupIntentPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsCreatePaymentIntentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsSetupIntentPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsSetupIntentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all payment-related transactions for stores owned by the authenticated vendor user. Can be filtered by a specific store.
         * @summary Get payment transactions for a vendor user
         * @param {string} [vendorId] Optional. The ID of a specific store (vendor) to filter payments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsVendorGet(vendorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsVendorGet(vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionApi.transactionsVendorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionApi - factory interface
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Payment Intent for an order
         * @param {TransactionsCreatePaymentIntentPostRequest} transactionsCreatePaymentIntentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest: TransactionsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionsCreatePaymentIntentPost200Response> {
            return localVarFp.transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my transaction history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TransactionWithRelations>> {
            return localVarFp.transactionsMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my saved payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMePaymentMethodsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SavedPaymentMethod>> {
            return localVarFp.transactionsMePaymentMethodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a saved payment method
         * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
         * @summary Create a Setup Intent to save a new payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSetupIntentPost(options?: RawAxiosRequestConfig): AxiosPromise<TransactionsCreatePaymentIntentPost200Response> {
            return localVarFp.transactionsSetupIntentPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all payment-related transactions for stores owned by the authenticated vendor user. Can be filtered by a specific store.
         * @summary Get payment transactions for a vendor user
         * @param {string} [vendorId] Optional. The ID of a specific store (vendor) to filter payments for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsVendorGet(vendorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<TransactionWithRelations>> {
            return localVarFp.transactionsVendorGet(vendorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 */
export class TransactionApi extends BaseAPI {
    /**
     * 
     * @summary Create a Payment Intent for an order
     * @param {TransactionsCreatePaymentIntentPostRequest} transactionsCreatePaymentIntentPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest: TransactionsCreatePaymentIntentPostRequest, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsCreatePaymentIntentPost(transactionsCreatePaymentIntentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my transaction history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsMeGet(options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my saved payment methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsMePaymentMethodsGet(options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsMePaymentMethodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a saved payment method
     * @param {string} paymentMethodId The Stripe PaymentMethod ID (pm_...).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId: string, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsMePaymentMethodsPaymentMethodIdDelete(paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Setup Intent to be used on the client-side for saving a new card for future use.
     * @summary Create a Setup Intent to save a new payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsSetupIntentPost(options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsSetupIntentPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all payment-related transactions for stores owned by the authenticated vendor user. Can be filtered by a specific store.
     * @summary Get payment transactions for a vendor user
     * @param {string} [vendorId] Optional. The ID of a specific store (vendor) to filter payments for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public transactionsVendorGet(vendorId?: string, options?: RawAxiosRequestConfig) {
        return TransactionApiFp(this.configuration).transactionsVendorGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}

